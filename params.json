{
  "name": "Jasmine2-cheatsheet",
  "tagline": "",
  "body": "# [<img src=\"https://cdn.rawgit.com/lennonjesus/jasmine2-cheatsheet/master/images/jasmine-cheatsheet-logo.svg\" width=\"400px\" />](http://jasmine.github.io)\r\n\r\n\r\n```javascript\r\ndescribe(\"Jasmine Cheatsheet\", function() {\r\n  it(\"is your Swiss Army knife!\", function() {\r\n    expect(helpYou).toUseJasmineLikeAPro();\r\n  });\r\n\r\n  describe(\"Credits\", function () {\r\n    it(\"is based on the Official Jasmine Documentation\", function () {\r\n      expected(\"http://jasmine.github.io/edge/introduction.html\").shouldBeVisited();\r\n    });\r\n  });\r\n\r\n  describe(\"Contribution\", function () {\r\n    it(\"is free to fork and contribute\", function () {\r\n      expected(forks).and.pullRequests();\r\n    });\r\n  });\r\n\r\n  afterAll(function() {\r\n    var author = \"Lennon Jesus\";\r\n  });\r\n});\r\n```\r\n\r\n##### Current Jasmine version:\r\n[![npm version](https://badge.fury.io/js/jasmine.svg)](http://badge.fury.io/js/jasmine)\r\n\r\n### Basic Structure\r\n\r\n```javascript\r\ndescribe(\"A basic Jasmine structure\", function() {\r\n\r\n  var trueValue = false;\r\n\r\n  beforeEach(function() {\r\n    // initialization code...\r\n    // mocks...\r\n    // spies...\r\n\r\n    trueValue = true;\r\n  });\r\n\r\n  it(\"should be true\", function() {\r\n      expect(trueValue).toBe(true);\r\n  });\r\n\r\n  afterEach(function() {\r\n    // tear down...\r\n    // good bye...\r\n    // finish him...\r\n    trueValue = false;\r\n  });\r\n});\r\n```\r\n\r\n### Spies how to...\r\n\r\n**...create a spy**\r\n\r\n```javascript\r\nspyOn(obj, 'method');\r\n\r\njasmine.createSpy('optional name');\r\n\r\njasmine.createSpyObj('name', ['fnct1', 'fnct2', ..., 'fnctN']);\r\n```\r\n\r\n**...modify the behavior of a spy**\r\n\r\n```javascript\r\nspyOn(obj, 'method').and.returnValue(val); // all calls to the function will return a specific value\r\n\r\nspyOn(obj, 'method').and.returnValues(val1, val2); // all calls to the function will return specific values in order until it reaches the end of the return values list, at which point it will return undefined for all subsequent calls\r\n\r\nspyOn(obj, 'method').and.callFake(fn); //all calls to the spy will delegate to the supplied function\r\n\r\nspyOn(obj, 'method').and.callThrough(); // it will delegate to the actual implementation\r\n\r\nspyOn(obj, 'method').and.throwError(err); //all calls to the spy will throw the specified value as an error\r\n\r\nspyOn(obj, 'method').and.stub(); // the original stubbing behavior can be returned at any time with and.stub\r\n```\r\n\r\n**...verify interactions**\r\n\r\n```javascript\r\nobj.method.calls.count(); //returns the number of times the spy was called\r\n\r\nobj.method.calls.any(); //returns false if the spy has not been called at all, and then true once at least one call happens\r\n\r\nobj.method.calls.reset(); // clears all tracking for a spy\r\n```\r\n\r\n**...inspect calls**\r\n\r\n```javascript\r\nobj.method.calls.first(); // returns the context (the this) and arguments for the first call\r\n\r\nobj.method.calls.mostRecent();\r\n\r\nobj.method.calls.all();\r\n```\r\n\r\n\r\n**...call description object**\r\n\r\n```javascript\r\n{\r\n  object: {...},  // 'this' object\r\n  args: []        // the arguments\r\n}\r\n```\r\n\r\n### Matchers\r\n\r\n**toBe**\r\n\r\n```javascript\r\nexpect(obj).toBe(null);M\r\n```\r\n\r\n**toEqual**\r\n\r\n```javascript\r\nexpect(obj).toEqual({id: 7});\r\n```\r\n\r\n**toMatch**\r\n\r\n```javascript\r\nexpect(msg).toMatch(/abc/);\r\n```\r\n\r\n**toBeDefined**\r\n\r\n```javascript\r\nexpect(obj).toBeDefined();\r\n```\r\n\r\n**toBeUndefined**\r\n\r\n```javascript\r\nexpect(obj).toBeUndefined();\r\n```\r\n\r\n**toBeTruthy**\r\n\r\n```javascript\r\nexpect('a').toBeTruthy();\r\n```\r\n\r\n**toBeFalsy**\r\n\r\n```javascript\r\nexpect(obj).toBeFalsy();\r\n```\r\n\r\n**toContain**\r\n\r\n```javascript\r\nexpect(arr).toContain();\r\n```\r\n\r\n**toBeLessThan**\r\n\r\n```javascript\r\nexpect(21).toBeLessThan(42);\r\n```\r\n\r\n**toBeGreaterThan**\r\n\r\n```javascript\r\nexpect(42).toBeGreaterThan(21);\r\n```\r\n\r\n**toBeCloseTo**\r\n\r\n```javascript\r\nexpect(1.2).toBeCloseTo(1.23, 1);\r\n```\r\n\r\n**toThrow**\r\n\r\n```javascript\r\nexpect(fnct).toThrow();\r\n```\r\n\r\n**toThrowError**\r\n\r\n```javascript\r\nexpect(obj).toThrowError();\r\n```\r\n\r\n**toBeNull**\r\n\r\n```javascript\r\nexpect(obj).toBeNull();\r\n```\r\n\r\n**not**\r\n\r\n```javascript\r\nexpect(obj).not.toEqual({id: 7});\r\nexpect(msg).not.toMatch(/abc/);\r\nexpect(obj).not.toBeUndefined();\r\nexpect(obj).not.toBeNull();\r\nexpect(obj).not.xxx...\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}